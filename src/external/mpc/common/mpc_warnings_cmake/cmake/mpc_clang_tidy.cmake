# Applies all clang-tidy checks to the target, except for the ones triggered by some
# pre-specified external headers
# :param EXEC_OR_LIB: Input target, gets checks applied to it
# :type EXEC_OR_LIB: A target
# :option RCLCPP: Disable checks rclcpp trips
# :option MSGS: Disable checks autogenerated messages trip
# :option TF2: Disable checks tf2 trips
# :option WARNING_AS_ERRORS: enable checks as errors
# :param HEADER_REGEX: Regex for headers to check against these specified checks
# :type HEADER_REGEX: Regex string
# :param ADDITIONAL_CHECKS: Additional checks to be forwarded to clang-tidy
# :type ADDITIONAL_CHECKS: List of strings
function(mpc_clang_tidy EXEC_OR_LIB)
  set(_ARG_OPTIONS "GTEST;RCLCPP;TF2;MSGS;WARNINGS_AS_ERRORS")
  set(_ARG_NAMES "HEADER_REGEX")
  set(_ARGN_NAMES "ADDITIONAL_CHECKS")

  find_program(CLANG_TIDY_COMMAND NAMES clang-tidy)

  if(NOT CLANG_TIDY_COMMAND)
    message(WARNING "mpc_clang_tidy was called but clang-tidy was not found!")
  else()
    cmake_parse_arguments(ARG
      "${_ARG_OPTIONS}" # Options
      "${_ARG_NAMES}" # single value keywords
      "${_ARGN_NAMES}" # ARGN / multi_value_keywords
      ${ARGN})
    if(ARG_UNPARSED_ARGUMENTS)
      message(FATAL_ERROR
        "mpc_clang_tidy called with unused arguments: " ${ARG_UNPARSED_ARGUMENTS})
    endif()

    # Base checks
    string(CONCAT _SETTINGS
    "clang-tidy;"
    "-analyze-temporary-dtors;"
    "-checks=*,"
      "-llvm-header-guard," # incompatible with Cpplint
      "-google-runtime-references," # disagree with rule
      "-clang-diagnostic-unused-command-line-argument" # Annoying, not valuable
    )

    if(ARG_GTEST)
    endif()

    if(ARG_RCLCPP)
      string(CONCAT _RCLCPP_CHECKS
        "-clang-diagnostic-format-nonliteral," # rclcpp logging...
        "-hicpp-vararg," # rclcpp logging...
        "-cppcoreguidelines-pro-type-vararg," # rclcpp logging...
        "-cppcoreguidelines-pro-bounds-array-to-pointer-decay," # rclcpp logging..
        "-hicpp-no-array-decay" # rclcpp logging...
        )
      set(_SETTINGS "${_SETTINGS},${_RCLCPP_CHECKS}")
    endif()

    if(ARG_MSGS)
      string(CONCAT _MSGS_CHECKS
        "-hicpp-deprecated-headers," # message headers
        "-modernize-deprecated-headers," # message headers
        "-fuchsia-overloaded-operator," # message headers
        "-hicpp-member-init," # message headers
        "-cppcoreguidelines-pro-type-member-init," # message headers
        "-modernize-use-using," # message headers
        "-llvm-include-order" # message headers
        )
      set(_SETTINGS "${_SETTINGS},${_MSGS_CHECKS}")
    endif()

    if(ARG_TF2)
    endif()

    if(ARG_ADDITIONAL_CHECKS)
      set(_SETTINGS "${_SETTINGS},${ARG_ADDITIONAL_CHECKS}")
    endif()

    if(ARG_HEADER_REGEX)
      set(_SETTINGS "${_SETTINGS};-header-filter=${ARG_HEADER_REGEX}")
    endif()
    if(ARG_WARNINGS_AS_ERRORS)
      set(_SETTINGS "${_SETTINGS};-warnings-as-errors=*")
    endif()

    set_property(TARGET ${EXEC_OR_LIB} PROPERTY CXX_CLANG_TIDY ${_SETTINGS})
  endif()
endfunction()
