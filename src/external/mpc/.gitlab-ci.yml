stages:
  - build

build:
  stage: build
  image: ubuntu:bionic
  script:
    # First install ROS 2 debians
    # - locale-gen en_US en_US.UTF-8
    # - update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
    - export LANG=en_US.UTF-8
    # Sources
    - apt update && apt install -y curl gnupg2 lsb-release git
    - curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -
    - sh -c 'echo "deb [arch=amd64,arm64] http://packages.ros.org/ros2/ubuntu `lsb_release -cs` main" > /etc/apt/sources.list.d/ros2-latest.list'
    - apt update
    # Insall and setup; tzdata prompts...
    - DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata
    # ROS 2 dashing and development dependencies
    - 'apt install -y
        ros-dashing-ros-base
        python3-colcon-common-extensions
        build-essential
        clang
        clang-tidy
        clang-tools
        cmake
        git
        python3-pip
        python-rosdep
        python3-vcstool
        wget
      '
    - 'python3 -m pip install -U
        argcomplete
        flake8
        flake8-blind-except
        flake8-builtins
        flake8-class-newline
        flake8-comprehensions
        flake8-deprecated
        flake8-docstrings
        flake8-import-order
        flake8-quotes
        pytest-repeat
        pytest-rerunfailures
        pytest
        pytest-cov
        pytest-runner
        setuptools
      '
    # apt version of clang doesn't support fgcc-record-switches?
    # - update-alternatives --set c++ /usr/bin/clang++
    - source /opt/ros/dashing/setup.bash
    - mkdir mpc && mv `find -maxdepth 1 -not -name . -not -name mpc` mpc/
    # Autoware.Auto
    - git clone https://gitlab.com/autowarefoundation/autoware.auto/AutowareAuto.git
    - git clone https://gitlab.com/autowarefoundation/autoware.auto/autoware_auto_msgs.git
    - git clone https://gitlab.com/ApexAI/apex_test_tools.git
    - git clone https://github.com/osrf/osrf_testing_tools_cpp.git
    - export MPC_PKGS=$(colcon list --names-only --base-paths mpc/)
    - echo $MPC_PKGS
    # build and test
    - 'colcon build
           --merge-install
           --cmake-args
             -DCMAKE_BUILD_TYPE=Debug
           --packages-up-to
            $MPC_PKGS
      '
    - 'colcon test
           --return-code-on-test-failure
           --merge-install
           --abort-on-error
           --packages-select
            $MPC_PKGS
      '
    - pwd && ls
    # Scan-build stuff
    - wget https://gitlab.com/aninnymouse/mpc/snippets/1894908/raw
    - mv raw scan_build.sh
    - sh scan_build.sh "colcon build --merge-install --packages-up-to $MPC_PKGS"
  artifacts:
    when: always
    name: "$CI_JOB_NAME"
    paths:
      - log
    expire_in: 1 week
