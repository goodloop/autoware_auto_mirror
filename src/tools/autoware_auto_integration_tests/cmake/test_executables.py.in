# generated from test_executables.py.in in apex_integration_tests

# Copyright 2018 Apex.AI, Inc.
# Co-developed by Tier IV, Inc. and Apex.AI, Inc.
#
# This file contains modified code from the following open source projects
# published under the licenses listed below:
#
#
# # Copyright 2016 Open Source Robotics Foundation, Inc.
# # Licensed under the Apache License, Version 2.0 (the "License");
# # you may not use this file except in compliance with the License.
# # You may obtain a copy of the License at
# #    http://www.apache.org/licenses/LICENSE-2.0
# # Unless required by applicable law or agreed to in writing, software
# # distributed under the License is distributed on an "AS IS" BASIS,
# # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# # See the License for the specific language governing permissions and
# # limitations under the License.


import os

from launch.legacy import LaunchDescriptor
from launch.legacy.exit_handler import ignore_exit_handler
from launch.legacy.exit_handler import primary_ignore_returncode_exit_handler
from launch.legacy.launcher import DefaultLauncher
from launch.legacy.output_handler import ConsoleOutput
from launch_testing import create_handler
from launch_testing import get_default_filtered_prefixes


def setup():
    os.environ['OSPL_VERBOSITY'] = '8'  # 8 = OS_NONE


def test_executable():
    output_handlers = []

    launch_descriptor = LaunchDescriptor()

    rmw_implementation = '@rmw_implementation@'
    executables = '@EXECUTABLES@'.split(';')
    arguments = '@EXEC_ARGS@'.split(';')
    output_files = '@EXPECTED_OUTPUTS@'.split(';')
    assert len(executables) == len(arguments) == len(output_files) , 'Length is different!'
    for i, (exe, args, output_file) in enumerate(zip(executables, arguments, output_files)):
        name = 'test_executable_' + str(i)
        # The last executable is taken to be the test program (the one whose
        # output check can make the decision to shut everything down)
        if i == (len(executables) - 1):
            exit_handler = primary_ignore_returncode_exit_handler
            exit_on_match = True
        else:
            exit_handler = ignore_exit_handler
            exit_on_match = False

        filtered = get_default_filtered_prefixes() + [b'service not available, waiting again...']
        handler = create_handler(
            name, launch_descriptor, output_file, filtered_prefixes=filtered,
            exit_on_match=exit_on_match, filtered_rmw_implementation=rmw_implementation)
        assert handler, 'Cannot find appropriate handler for %s' % output_file
        output_handlers.append(handler)
        launch_descriptor.add_process(
            cmd=([exe] + args.split(' ') if args and not args.isspace() else [exe]),
            name=name,
            exit_handler=exit_handler,
            output_handlers=[ConsoleOutput(), handler],
        )

    launcher = DefaultLauncher()
    launcher.add_launch_descriptor(launch_descriptor)
    rc = launcher.launch()

    assert rc == 0, \
        "The launch file failed with exit code '" + str(rc) + "'. " \
        'Maybe the client did not receive any messages?'

    for handler in output_handlers:
        handler.check()


if __name__ == '__main__':
    test_executable()
